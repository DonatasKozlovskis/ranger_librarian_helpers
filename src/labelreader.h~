#ifndef LABELREADER_H
#define LABELREADER_H

using namespace std;



template <typename T>
T clamp(const T& n, const T& lower, const T& upper) {
      return std::max(lower, std::min(n, upper));
}

template <typename T>
double getClampRatio(const T& n, const T& lower, const T& upper) {
	  T clampedSpeed = std::max(lower, std::min(n, upper));
      return 1.0*clampedSpeed/n;
}

class Ranger {

public:

    RangerOdometry odom;
    float scaleValue;

    Ranger(const string& aseba_target):aseba_node(aseba_target.c_str()) {
        // check whether connection was successful
        if (!aseba_node.isValid())
        {
            ROS_ERROR_STREAM("Could not connect to Aseba target " << aseba_target);
            exit(1);
        }
        else {ROS_INFO_STREAM("Connected to Aseba target " << aseba_target);}
    };

    void step() {
        aseba_node.Hub::step(); // check for incoming Aseba events

        scaleValue = aseba_node.scale;

        if (aseba_node.is_charging) {
            odom.reset(0.35, 0., 0.);
        }
        else {
            odom.update(aseba_node.l_encoder, aseba_node.r_encoder);
        }
    }

    void set_speed(const geometry_msgs::Twist& msg) {

        pair<double, double> speeds = odom.twist_to_motors(msg.linear.x, msg.angular.z);
        pair<double, double> speedScaled;
        
        speedScaled.first = speeds.first * 100./ MAX_SPEED;
        speedScaled.second = speeds.second * 100./ MAX_SPEED;
        		
		double clampRatioL = getClampRatio<int>(speedScaled.first, -100, 100);
		double clampRatioR = getClampRatio<int>(speedScaled.second, -100, 100);
				
		double clampRatio =  std::min(clampRatioL, clampRatioR);
		
		int lspeed = round(speedScaled.first * clampRatio);
		int rspeed = round(speedScaled.second * clampRatio);
		
        aseba_node.setSpeed(lspeed, -rspeed);

    }

private:
    RangerAsebaBridge aseba_node;

};



#endif // LABELREADER_H
